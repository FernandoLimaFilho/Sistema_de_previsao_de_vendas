# -*- coding: utf-8 -*-
"""Sistema de previs√£o de vendas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZX2mH5O9yqO9nfa9IMihj_Dd0GVGD0yG
"""

pip install streamlit

# app_previsao_vendas.py

import streamlit as st
import pandas as pd
import numpy as np
import datetime
from dateutil.relativedelta import relativedelta
import plotly.express as px
import gspread
from google.oauth2.service_account import Credentials

# ---------------------------
# Configura√ß√£o do Streamlit
# ---------------------------
st.set_page_config(
    page_title="Previs√£o de Vendas",
    page_icon="üìà",
    layout="wide",
)

st.title("üìä Sistema de Previs√£o de Vendas")
st.markdown("Aplicativo interativo para previs√£o de vendas com base em s√©ries hist√≥ricas e m√©dias m√≥veis.")

# ---------------------------
# Conex√£o com Google Sheets via st.secrets
# ---------------------------
scopes = ["https://spreadsheets.google.com/feeds",
          "https://www.googleapis.com/auth/drive"]

# Carregando credenciais do Streamlit secrets
creds = Credentials.from_service_account_info(
    st.secrets["gcp_service_account"],
    scopes=scopes
)
client = gspread.authorize(creds)
spreadsheet = client.open("Series temporais de vendas")

# ---------------------------
# Sele√ß√£o do Produto
# ---------------------------
abas = [ws.title for ws in spreadsheet.worksheets()]
produto = st.selectbox("Escolha o produto:", abas)

# Carregar dados
worksheet = spreadsheet.worksheet(produto)
dados = worksheet.get_all_records()
df = pd.DataFrame(dados)
df["Data"] = pd.to_datetime(df["Data"])

# M√©dia m√≥vel 2 meses
df["MM2"] = df["Qtd vendida"].rolling(2).mean()

# ---------------------------
# Gr√°fico interativo
# ---------------------------
fig = px.line(
    df,
    x="Data",
    y=["Qtd vendida", "MM2"],
    title=f"S√©rie Temporal de Vendas - {produto}",
    markers=True,
    template="plotly_white"
)
fig.update_traces(selector=dict(name="Qtd vendida"), line=dict(color="gold", width=3))
fig.update_traces(selector=dict(name="MM2"), line=dict(color="black", width=3, dash="dash"))
fig.update_layout(
    title_font=dict(size=22, family="Arial", color="black"),
    xaxis_title="Per√≠odo (m√™s/ano)",
    yaxis_title="Quantidade Vendida",
    xaxis=dict(showgrid=True, tickformat="%b %Y"),
    yaxis=dict(showgrid=True),
    hovermode="x unified",
    legend_title="Legenda"
)
st.plotly_chart(fig, use_container_width=True)

# ---------------------------
# Previs√£o
# ---------------------------
mes_previsto = st.date_input("Selecione o m√™s para previs√£o:")

ano_anterior = mes_previsto - relativedelta(years=1)
mes1 = mes_previsto - relativedelta(months=1)
mes2 = mes_previsto - relativedelta(months=2)

venda_ano_anterior = df[df["Data"] == ano_anterior]["Qtd vendida"].sum()
media_2meses = df[df["Data"].isin([mes1, mes2])]["Qtd vendida"].mean()

if pd.isna(media_2meses):
    st.warning("‚ö†Ô∏è Base de dados incompleta! Alimente as vendas dos meses anteriores.")
else:
    st.write(f"üìä Vendas {ano_anterior.strftime('%m/%Y')}: {venda_ano_anterior}")
    st.write(f"üìä M√©dia 2 meses anteriores: {media_2meses}")

    limite = 0.2
    discrepante = abs(venda_ano_anterior - media_2meses) > limite * media_2meses

    impacto_externo = st.radio(
        "Houve algum fator relevante que impacta as vendas?",
        ("N√£o", "Sim")
    )

    previsao = None
    if not discrepante:
        if impacto_externo == "N√£o":
            previsao = venda_ano_anterior
        else:
            ajuste = st.number_input("Digite o ajuste manual:", value=0)
            previsao = venda_ano_anterior + ajuste
    else:
        if impacto_externo == "Sim":
            ajuste = st.number_input("Digite o ajuste manual:", value=0)
            previsao = media_2meses + ajuste
        else:
            st.info("‚ö†Ô∏è Base discrepante. Analise os dados antes de definir a previs√£o manualmente.")

    if previsao is not None:
        st.success(f"‚úÖ Previs√£o de vendas para {produto} em {mes_previsto.strftime('%m/%Y')}: {previsao}")